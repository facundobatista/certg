# Copyright 2013-2018 Facundo Batista

# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3, as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranties of
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# For further info, check  http://github.com/facundobatista/certg

import os
import re
import subprocess
import tempfile
import uuid


def get_gs_cmd(srcpath, dstpath):
    """Build the command for Ghoscript to optimize a PDF."""
    cmd = [
        '/usr/bin/gs', '-sDEVICE=pdfwrite', '-dCompatibilityLevel=1.4', '-dPDFSETTINGS=/default',
        '-dNOPAUSE', '-dBATCH', '-dQUIET', '-sOutputFile={}'.format(dstpath), srcpath]
    return cmd


def get_inkscape_cmd(srcpath, dstpath):
    """Build the command for Inkscape to convert the SVG into PDF."""
    cmd = ['inkscape', '--export-text-to-path', '--export-pdf={}'.format(dstpath), srcpath]
    return cmd


def pre_process_image(content, place_id):
    """Preprocess a SVG changing a rect for an image, to be filled by replacing a specific var."""
    replace_var = uuid.uuid4().hex

    def mutate(match):
        params = match.groups()[0].split()
        if not any(place_id in param for param in params):
            # not the object we were searching for mutation, return the original sequence
            return match.string[slice(*match.span())]

        params = [p for p in params if p.startswith(("id=", "width=", "height=", "x=", "y="))]
        params.append('xlink:href="file://{}"'.format(replace_var))
        params.append('preserveAspectRatio="none"')
        return "<image {} />".format(" ".join(params))

    content = re.sub("<rect(.*?)>", mutate, content, flags=re.DOTALL)
    return content, replace_var


def process(
        svg_source, result_prefix, result_distinct, replace_info, images, progress_cb=None,
        pdf_optimized=False):
    """Generate N PDFs.

    Each PDF is from a key in replace_info, replacing data into the
    svg_source, and naming each PDF according to result_*.

    After each PDF progress_cb (if any) will be called to indicate progress.

    If pdf_optimized in True, Ghostscript will be called to improve the final file.
    """
    with open(svg_source, "rt", encoding='utf8') as fh:
        content_base = fh.read()

    if images is not None:
        for image in images:
            place_id = image['placement_rectangle_id']
            content_base, replacement_variable = pre_process_image(content_base, place_id)
            image['replacement_variable'] = replacement_variable

    # get all the replacing attrs
    replacing_attrs = set()
    for data in replace_info:
        replacing_attrs.update(data)

    fileresults = []
    for data in replace_info:
        # indicate advance, if should
        if progress_cb is not None:
            progress_cb(data)

        # replace content
        content = content_base
        for attr in replacing_attrs:
            value = data.get(attr)
            if value is None:
                # both because the attr is not supplied, or supplied empty
                value = ""
            content = content.replace("{{" + attr + "}}", value)

        # replace image, if any
        if images is not None:
            for image in images:
                image_path_variable = image['path_variable']
                image_path = os.path.abspath(data[image_path_variable])
                replacement_variable = image['replacement_variable']
                content = content.replace(replacement_variable, image_path)

        # write the new svg
        _, tmpfile = tempfile.mkstemp(suffix='.svg')
        with open(tmpfile, "wt", encoding='utf8') as fh:
            fh.write(content)

        # generate PDF
        distinct = data[result_distinct].lower().replace(" ", "")
        final_pdf = "{}-{}.pdf".format(result_prefix, distinct)
        fileresults.append(final_pdf)
        if pdf_optimized:
            _, pdf_by_inkscape = tempfile.mkstemp(suffix='.pdf')
            pdf_by_gs = final_pdf
        else:
            # inkscape generates directly the final PDF
            pdf_by_inkscape = final_pdf

        cmd = get_inkscape_cmd(tmpfile, pdf_by_inkscape)
        subprocess.check_call(cmd)
        os.remove(tmpfile)

        if pdf_optimized:
            # optimize the PDF generated by inkscape
            cmd = get_gs_cmd(pdf_by_inkscape, pdf_by_gs)
            subprocess.check_call(cmd)
            os.remove(pdf_by_inkscape)

    return fileresults
